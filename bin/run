#! /usr/bin/env php
<?php

chdir(dirname(dirname(__FILE__)));

require './vendor/autoload.php';

use AlphabeticalWordCounter\Console\CommandCollection;
use Assert\Assert;

$commands = require 'module/AlphabeticalWordCounter/config/commands.config.global.php';
$lazy     = Assert::lazy();
$app      = new CommandCollection();

foreach ($commands as $command) {
    $lazy->that($command)
         ->string()
         ->notEmpty();
}

try {
    $lazy->verifyNow();
} catch (\Exception $e) {
    echo $e->getMessage();
    exit(1);
}

foreach ($commands as $command) {
    $instance = null;

    // Look for a factory to create the instance
    // Use factories if there are any dependancies to inject into the implementation
    if (class_exists($command . 'Factory')) {
        $factoryName = $command . 'Factory';
        $factory     = new $factoryName();
        $instance    = $factory->createInstance();
    } elseif (class_exists($command)) {
        $instance = new $command();
    }

    if (null === $instance) {
        echo sprintf('Unable to create instance of %s%s', $command, PHP_EOL);
        continue;
    }

    $app->registerCommand($instance);
}

$registered = $app->getRegisteredCommandNames();
$name       = $argv[1];

$exitCode = 0;
if (!empty($name) && empty($registered[$name])) {
    echo sprintf('Unable to find command with name: %s', $name) . PHP_EOL;
    $exitCode = 1;
    $name     = '';
}

if (empty($name)) {
    echo 'Registered Commands: ' . PHP_EOL;
    echo '    ' . implode(PHP_EOL . '    ', $registered);
    exit($exitCode);
}

exit($app->runCommand($name));
